#!/bin/bash

echo "üî® Construyendo aplicaci√≥n Electron para Sistema de Inventario..."

# Verificar que Node.js est√© instalado
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js no est√° instalado. Por favor, instala Node.js primero."
    exit 1
fi

# Verificar que npm est√© instalado
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm no est√° instalado. Por favor, instala npm primero."
    exit 1
fi

echo "‚úÖ Node.js $(node --version) detectado"
echo "‚úÖ npm $(npm --version) detectado"

# Limpiar instalaciones previas
echo "üßπ Limpiando instalaciones previas..."
rm -rf node_modules
rm -rf dist
rm -f package-lock.json

# Instalar dependencias
echo "üì¶ Instalando dependencias..."
npm install

# Verificar archivos cr√≠ticos
echo "üîç Verificando archivos cr√≠ticos..."

if [ ! -f "electron.js" ]; then
    echo "‚ùå electron.js no encontrado"
    exit 1
fi

if [ ! -f "index.js" ]; then
    echo "‚ùå index.js no encontrado"
    exit 1
fi

if [ ! -f "preload.js" ]; then
    echo "‚ùå preload.js no encontrado"
    exit 1
fi

if [ ! -d "frontend" ]; then
    echo "‚ùå Directorio frontend no encontrado"
    exit 1
fi

echo "‚úÖ Todos los archivos cr√≠ticos encontrados"

# Crear directorio de assets si no existe
if [ ! -d "assets" ]; then
    echo "üìÅ Creando directorio de assets..."
    mkdir -p assets
    
    # Crear iconos placeholder
    echo "üé® Creando iconos placeholder..."
    
    if command -v convert &> /dev/null; then
        # Si ImageMagick est√° instalado, crear iconos reales
        convert -size 256x256 xc:"#052e5b" -fill white -gravity center -pointsize 72 -annotate +0+0 "INV" assets/icon.png
        convert assets/icon.png -resize 32x32 assets/icon.ico
        if command -v png2icns &> /dev/null; then
            png2icns assets/icon.icns assets/icon.png
        else
            cp assets/icon.png assets/icon.icns
        fi
    else
        # Crear archivos placeholder
        touch assets/icon.png
        touch assets/icon.ico
        touch assets/icon.icns
        echo "‚ö†Ô∏è  Iconos placeholder creados. Reemplaza con iconos reales para producci√≥n."
    fi
fi

# Verificar archivo .env
if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  Archivo .env no encontrado. Creando archivo .env de ejemplo..."
    cat > .env << EOF
# Configuraci√≥n de la aplicaci√≥n
NODE_ENV=production
PORT=3000
JWT_SECRET=aceites-motor-secret-key-2025

# Configuraci√≥n de Supabase (opcional)
# SUPABASE_URL=tu_url_de_supabase
# SUPABASE_SERVICE_KEY=tu_service_key_de_supabase
EOF
    echo "‚úÖ Archivo .env creado. Configura las variables seg√∫n sea necesario."
fi

# Funci√≥n para construir para plataforma espec√≠fica
build_platform() {
    local platform=$1
    echo "üèóÔ∏è  Construyendo para $platform..."
    
    # Limpiar cach√© de electron-builder
    npx electron-builder --help > /dev/null 2>&1
    
    case $platform in
        "windows")
            # Construir para Windows con configuraci√≥n espec√≠fica
            npx electron-builder --windows --config.compression=normal --config.nsis.oneClick=false
            ;;
        "mac")
            npx electron-builder --mac --config.compression=normal
            ;;
        "linux")
            npx electron-builder --linux --config.compression=normal
            ;;
        "all")
            echo "üåç Construyendo para todas las plataformas..."
            npx electron-builder --windows --config.compression=normal --config.nsis.oneClick=false
            npx electron-builder --mac --config.compression=normal
            npx electron-builder --linux --config.compression=normal
            ;;
        *)
            echo "‚ùå Plataforma no reconocida: $platform"
            echo "Plataformas disponibles: windows, mac, linux, all"
            exit 1
            ;;
    esac
}

# Verificar argumentos
if [ $# -eq 0 ]; then
    echo "Uso: $0 <plataforma>"
    echo "Plataformas disponibles: windows, mac, linux, all"
    echo ""
    echo "Ejemplos:"
    echo "  $0 windows    # Construir solo para Windows"
    echo "  $0 mac        # Construir solo para macOS"
    echo "  $0 linux      # Construir solo para Linux"
    echo "  $0 all        # Construir para todas las plataformas"
    exit 1
fi

# Pre-build: Verificar que la aplicaci√≥n funciona
echo "üß™ Probando que la aplicaci√≥n funciona..."
timeout 10s node index.js &
SERVER_PID=$!
sleep 5

if kill -0 $SERVER_PID 2>/dev/null; then
    echo "‚úÖ Servidor se inicia correctamente"
    kill $SERVER_PID
else
    echo "‚ùå Error: El servidor no se inicia correctamente"
    echo "Verifica que no haya errores en index.js"
    exit 1
fi

# Construir para la plataforma especificada
build_platform $1

echo ""
echo "‚úÖ Construcci√≥n completada!"
echo "üì¶ Los archivos de distribuci√≥n est√°n en el directorio 'dist/'"
echo ""
echo "üîç Archivos generados:"
ls -la dist/ 2>/dev/null || echo "No se encontr√≥ el directorio dist/"
echo ""
echo "Para instalar y ejecutar:"
echo "  - Windows: Ejecuta el archivo .exe en dist/"
echo "  - macOS: Abre el archivo .dmg en dist/"
echo "  - Linux: Ejecuta el archivo .AppImage en dist/"
echo ""
echo "üìã Notas importantes:"
echo "  - Aseg√∫rate de que el archivo .env est√© configurado correctamente"
echo "  - Los archivos del frontend deben estar en el directorio 'frontend/'"
echo "  - Verifica que no haya puertos ocupados en el sistema de destino"